def secretObject

pipeline {
    agent any
    
    parameters {
        string(name: 'GIT_REPO_URL', description: 'URL do repositório GitHub', defaultValue: 'https://github.com/kayqueln/poc-flyway-sql.git')
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: params.GIT_REPO_URL]]])
                }
            }
        }
        
       stage('Lendo do arquivo .env') {
            steps {
                script {
                    def properties = [:]
                    def envFile = '.env'
                    if (fileExists(envFile)) {
                        def propertiesContent = readFile(envFile)
                        propertiesContent.readLines().each { line ->
                            def (key, value) = line.split('=')
                            properties[key.trim()] = value.trim()
                        }
                        
                        if (!properties.containsKey('SECRET_NAME')) {
                            error 'A propriedade SECRET_NAME não foi definida no arquivo .env.'
                        } else {
                            echo "Propriedade: SECRET_NAME, Valor: ${properties['SECRET_NAME']}"
                        }

                        properties.each { key, value ->
                            env."${key}" = "${value}"
                        }
                    } else {
                        error "O arquivo ${envFile} não foi encontrado."
                    }
                }
            }
        }

        stage('Obtendo credenciais da AWS') {
            steps {
                withAWS(credentials: 'aws-credentials', region: 'us-east-1') {
                    script{
                        def secretValue = sh(script: "/usr/local/bin/aws secretsmanager get-secret-value --secret-id ${SECRET_NAME} --query SecretString --output text", returnStdout: true)
                        secretObject = readJSON(text: "${secretValue}")                        
                    }
                }
            }
        } 
    

        stage('Estabelecendo conexão com o Flyway') {
            steps {
                script {
                    def commandOutput = sh(script: "/usr/local/bin/flyway -url=jdbc:${secretObject.engine}://${secretObject.host}:${secretObject.port}/${secretObject.db_name} -user=${secretObject.username} -password=${secretObject.password} info", returnStatus: true)
                    
                    if (commandOutput == 0) {
                        echo 'Conexão com o Flyway estabelecida com sucesso.'
                    } else {
                        error 'Falha ao estabelecer conexão com o Flyway.'
                    }
                }
            }
        }


        stage('Executando migrações SQL com o Flyway') {
            steps {
                script {
                    def migrations = readFile(file: 'sql/migrations.sql')
                    echo "${migrations}"
                    
                    def commandOutput = sh(script: "/usr/local/bin/flyway -url=jdbc:${secretObject.engine}://${secretObject.host}:${secretObject.port}/${secretObject.db_name} -user=${secretObject.username} -password=${secretObject.password} -locations=filesystem:${migrations} migrate", returnStatus: true)
                    
                    if (commandOutput == 0) {
                        echo 'Migrações SQL executadas com sucesso.'
                    } else {
                        error 'Falha ao executar migrações SQL.'
                    }
                }
            }
        }




    }
    
}
