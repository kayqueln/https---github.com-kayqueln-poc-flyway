pipeline {
    agent any
    
    parameters {
        string(name: 'GIT_REPO_URL', description: 'URL do repositório GitHub', defaultValue: 'https://github.com/kayqueln/poc-flyway-sql.git')
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: params.GIT_REPO_URL]]])
                }
            }
        }
        
       stage('Lendo do arquivo .env') {
            steps {
                script {
                    def properties = [:]
                    def envFile = '.env'
                    if (fileExists(envFile)) {
                        def propertiesContent = readFile(envFile)
                        propertiesContent.readLines().each { line ->
                            def (key, value) = line.split('=')
                            properties[key.trim()] = value.trim()
                        }
                        properties.each { key, value ->
                            env."${key}" = "${value}"
                            echo "Propriedade: ${key}, Valor: ${value}"
                        }
                    } else {
                        error "O arquivo ${envFile} não foi encontrado."
                    }
                }
            }
        }

        stage('Obter credenciais do AWS Secret Manager') {
            steps {
                script {
                    // Importa bibliotecas
                    import com.amazonaws.auth.AWSCredentials
                    import com.amazonaws.services.secretsmanager.AWSSecretsManager
                    import com.amazonaws.services.secretsmanager.model.GetSecretValueRequest
                    import com.amazonaws.services.secretsmanager.model.GetSecretValueResult
                    
                    // Define credenciais (substitua pelas suas)
                    def credentialsId = 'aws-credentials' // ID da credencial AWS configurada no Jenkins
                    
                    // Carrega credenciais do Jenkins
                    AWSCredentials credentials = credentials(id: credentialsId)
                    
                    // Define região AWS (substitua pela sua)
                    def awsRegion = AWSRegion.US_EAST_1 // Região onde o Secret Manager está localizado
                    
                    // Cria cliente Secrets Manager
                    AWSSecretsManager secretsManager = new AWSSecretsManager(credentials, awsRegion)
                    
                    // Define nome da Secret
                    def secretName = "${SECRET_NAME}"
                    
                    // Realiza requisição para recuperar o valor
                    GetSecretValueRequest request = new GetSecretValueRequest().withSecretId(secretName)
                    GetSecretValueResult result = secretsManager.getSecretValue(request)
                    
                    // Verifica se a Secret foi recuperada
                    if (result != null) {
                        def secretString = result.secretString
                        echo "Valor da Secret ${secretName}: ${secretString}"
                        
                        // Processar o valor da Secret (opcional)
                        // ...
                    } else {
                        error "Falha ao recuperar a Secret ${secretName}"
                    }
                }
            }
        }
 
       

        //se conectar usando o flyway

        //executar DLL do repositório

    }
    
}
