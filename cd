pipeline {
    agent any
    
    parameters {
        string(name: 'GIT_REPO_URL', description: 'URL do repositório GitHub', defaultValue: 'https://github.com/kayqueln/poc-flyway-sql.git')
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: params.GIT_REPO_URL]]])
                }
            }
        }
        
       stage('Lendo do arquivo .env') {
            steps {
                script {
                    def properties = [:]
                    def envFile = '.env'
                    if (fileExists(envFile)) {
                        def propertiesContent = readFile(envFile)
                        propertiesContent.readLines().each { line ->
                            def (key, value) = line.split('=')
                            properties[key.trim()] = value.trim()
                        }
                        properties.each { key, value ->
                            env."${key}" = "${value}"
                            echo "Propriedade: ${key}, Valor: ${value}"
                        }
                    } else {
                        error "O arquivo ${envFile} não foi encontrado."
                    }
                }
            }
        }

        stage('Obtendo secret') {
            steps {
                // Utilize o plugin 'aws-secrets-manager'
                withAWS(credentials: 'aws-credentials', region: 'us-east-1') {
                    echo "Conectado com a AWS"
                    // Acesso o Secrets Manager
                    def secretsManager = new com.amazonaws.services.secretsmanager.AWSSecretsManagerClient()
                    
                    // Obtenha o valor da Secret pelo nome
                    def getSecretValueRequest = new com.amazonaws.services.secretsmanager.model.GetSecretValueRequest()
                    getSecretValueRequest.setSecretId("${SECRET_NAME}")
                    def getSecretValueResult = secretsManager.getSecretValue(getSecretValueRequest)
                    
                    // Armazene o valor em uma String
                    def secret = getSecretValueResult.getSecretString()
                    echo "Valor do segredo: ${secret}"
                }
            }
        }


        //se conectar usando o flyway

        //executar DLL do repositório

    }
    
}
